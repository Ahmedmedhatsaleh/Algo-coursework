#include <iostream>
#include <chrono>
#include <iomanip>
#include <algorithm>
#include <cstdlib>
#include <ctime>
using namespace std;
using namespace std::chrono;
int bubble_sort_count(int arr[], int n) {
    int comparisons = 0;
    bool swapped;
    for (int i = 0; i < n - 1; i++) {
        swapped = false;
        for (int j = 0; j < n - i - 1; j++) {
            comparisons++;
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
                swapped = true;
            }
        }
        if (!swapped) break;
    }
    return comparisons;
}
int selection_sort_count(int arr[], int n) {
    int comparisons = 0;
    for (int i = 0; i < n - 1; i++) {
        int minIndex = i;
        for (int j = i + 1; j < n; j++) {
            comparisons++;
            if (arr[j] < arr[minIndex])
                minIndex = j;
        }
        swap(arr[i], arr[minIndex]);
    }
    return comparisons;
}
int insertion_sort_count(int arr[], int n) {
    int comparisons = 0;
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && (++comparisons && arr[j] > key)) {
            arr[j + 1] = arr[j];
            j--;
        }
        if (j >= 0) comparisons++; 
        arr[j + 1] = key;
    }
    return comparisons;
}

void generate_random_array(int arr[], int n) {
    for (int i = 0; i < n; i++)
        arr[i] = rand() % 1000;
}
void generate_sorted_array(int arr[], int n) {
    for (int i = 0; i < n; i++)
        arr[i] = i;
}
void generate_reverse_sorted_array(int arr[], int n) {
    for (int i = 0; i < n; i++)
        arr[i] = n - i;
}
void test_comparisons() {
    srand(time(0));
    cout << left
         << setw(12) << "Number"
         << setw(25) << "Array type"
         << right
         << setw(25) << "BubbleSort comparison"
         << setw(30) << "SelectionSort comparison"
         << setw(30) << "InsertionSort comparison"
         << setw(30) << "BubbleSort time"
         << setw(30) << "SelectionSort time"
         << setw(30) << "InsertionSort time" << endl;
    cout << string(212, '-') << endl;
    for (int n = 1; n <= 30; n++) {
        int arr[1000], temp[1000];
        string types[3] = {"Random", "Sorted", "Reverse"};
        void (*generators[3])(int[], int) = {
            generate_random_array,
            generate_sorted_array,
            generate_reverse_sorted_array
        };
        for (int t = 0; t < 3; t++) {
            generators[t](arr, n);
            copy(arr, arr + n, temp);
            auto start = high_resolution_clock::now();
            int bComp = bubble_sort_count(temp, n);
            auto end = high_resolution_clock::now();
            double bTime = duration<double>(end - start).count();

            copy(arr, arr + n, temp);
            start = high_resolution_clock::now();
            int sComp = selection_sort_count(temp, n);
            end = high_resolution_clock::now();
            double sTime = duration<double>(end - start).count();

            copy(arr, arr + n, temp);
            start = high_resolution_clock::now();
            int iComp = insertion_sort_count(temp, n);
            end = high_resolution_clock::now();
            double iTime = duration<double>(end - start).count();
            cout << left
                 << setw(12) << n
                 << setw(25) << types[t]
                 << right
                 << setw(25) << bComp
                 << setw(30) << sComp
                 << setw(30) << iComp
                 << setw(30) << fixed << setprecision(8) << bTime
                 << setw(30) << sTime
                 << setw(30) << iTime
                 << endl;
        }
    }
}

int main() {
    test_comparisons();
    return 0;
}
